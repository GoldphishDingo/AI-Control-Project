import random
import time

import keyboard
import pydirectinput
import win32api
import win32con


# define the mouse turn functions
def turn_left():
    delta_x = random.randint(500, 1500)
    win32api.mouse_event(win32con.MOUSEEVENTF_MOVE, -delta_x, 0, 0, 0)


def turn_right():
    delta_x = random.randint(500, 1500)
    win32api.mouse_event(win32con.MOUSEEVENTF_MOVE, delta_x, 0, 0, 0)


def walk():
    keyboard.press('w')
    time.sleep(1.5)  # hold W for 0.5 seconds
    keyboard.release('w')


def run():
    keyboard.press('shift')
    keyboard.press('w')
    time.sleep(5)  # hold W for 4 seconds
    keyboard.press('shift')
    keyboard.release('w')


def press_R():
    pydirectinput.keyDown('r')
    pydirectinput.keyUp('r')


def prep_choice():
    pydirectinput.moveRel(0, 100)
    print("I want to make a choice, moving mouse straight down!")
    time.sleep(0.1)


def decision_move_left():
    pydirectinput.moveTo(0, win32api.GetSystemMetrics(1))
    print("I've decided to scritch, moving mouse left!")


def decision_move_right():
    pydirectinput.moveTo(win32api.GetSystemMetrics(0), win32api.GetSystemMetrics(1))
    print("I've decided to look around, moving mouse right!")


def click():
    pydirectinput.mouseDown()
    pydirectinput.mouseUp()


def check_for_b_key():
    if keyboard.is_pressed('b'):
        print("B key pressed, pausing")
        # Wait for the letter N to be pressed
        keyboard.wait('n')
        print("N key pressed, resuming")


def stop():
    global running
    running = False


action_functions = {
    0: lambda: None,
    1: lambda: (press_R(), prep_choice(), decision_move_left(), click(), press_R(), time.sleep(3)),
    2: lambda: (press_R(), prep_choice(), decision_move_right(), click(), press_R(), time.sleep(3))
}

# set the random seed
random.seed()

# create a dictionary of functions to simulate turning left or right
turn_functions = {
    0: turn_left,
    1: turn_right
}

# set the delay between turns in seconds
delay = random.randint(0, 2)

keyboard.wait('n')

# start the program
running = True
while running:
    # Periodically check if the B key has been pressed
    check_for_b_key()
    # choose a random turn function
    turn_function = turn_functions[random.randint(0, 1)]
    # execute the chosen turn function
    turn_function()
    # choose a random action function
    action_function = action_functions[random.randint(0, 2)]
    # execute the chosen action function
    action_function()
    # delay before the next turn
    time.sleep(delay)

    if random.random() >= 0.5:
        if random.random() > 0.8:
            run()
        else:
            # randomly hold down W
            walk()
